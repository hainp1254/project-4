name: CI Front End

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd ./starter/frontend
          npm ci

      - name: Run tests
        run: |
          cd ./starter/frontend
          npm run test
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd ./starter/frontend
          npm ci

      - name: Run ESLint
        run: |
          cd ./starter/frontend
          npm run lint
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd ./starter/frontend
          npm ci

      - name: Build Docker image
        run: |
          cd ./starter/frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .

  ecr-login:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

  push-to-ecr:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: 155241587390
      AWS_REGION: us-east-1

    needs: ecr-login
    steps:
      - name: Push Docker image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mp-frontend:latest

#  deploy:
#    runs-on: ubuntu-latest
#    env:
#      AWS_REGION: your-region  # Set your AWS region
#      AWS_ACCOUNT_ID: your-account-id  # Set your AWS account ID
#      AWS_ECR_NAME: my-frontend-app  # Set your ECR repository name
#    needs: build  # This job will run only if the build job succeeds
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Log in to Amazon ECR
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Push Docker image to ECR
#        run: |
#          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
#          docker tag project-4-frontend-app:${{ github.sha }} ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.your-region.amazonaws.com/${{ env.AWS_ECR_NAME }}:${{ github.sha }}
#          docker push your-account-id.dkr.ecr.your-region.amazonaws.com/my-frontend-app:${{ github.sha }}
#
#      - name: Deploy to Kubernetes
#        run: |
#          kubectl apply -f k8s/movie-picture-deployment.yaml
